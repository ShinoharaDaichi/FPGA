// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/10/2015 11:35:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux16
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux16_vlg_sample_tst(
	input_lines,
	selection_lines,
	sampler_tx
);
input [15:0] input_lines;
input [3:0] selection_lines;
output sampler_tx;

reg sample;
time current_time;
always @(input_lines or selection_lines)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux16_vlg_check_tst (
	output_line,
	sampler_rx
);
input  output_line;
input sampler_rx;

reg  output_line_expected;

reg  output_line_prev;

reg  output_line_expected_prev;

reg  last_output_line_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	output_line_prev = output_line;
end

// update expected /o prevs

always @(trigger)
begin
	output_line_expected_prev = output_line_expected;
end



// expected output_line
initial
begin
	output_line_expected = 1'bX;
end 
// generate trigger
always @(output_line_expected or output_line)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected output_line = %b | ",output_line_expected_prev);
	$display("| real output_line = %b | ",output_line_prev);
`endif
	if (
		( output_line_expected_prev !== 1'bx ) && ( output_line_prev !== output_line_expected_prev )
		&& ((output_line_expected_prev !== last_output_line_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output_line :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_line_expected_prev);
		$display ("     Real value = %b", output_line_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_line_exp = output_line_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux16_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] input_lines;
reg [3:0] selection_lines;
// wires                                               
wire output_line;

wire sampler;                             

// assign statements (if any)                          
mux16 i1 (
// port map - connection between master ports and signals/registers   
	.input_lines(input_lines),
	.output_line(output_line),
	.selection_lines(selection_lines)
);
// input_lines[ 15 ]
initial
begin
	input_lines[15] = 1'b0;
end 
// input_lines[ 14 ]
initial
begin
	input_lines[14] = 1'b0;
end 
// input_lines[ 13 ]
initial
begin
	input_lines[13] = 1'b0;
end 
// input_lines[ 12 ]
initial
begin
	input_lines[12] = 1'b1;
end 
// input_lines[ 11 ]
initial
begin
	input_lines[11] = 1'b0;
end 
// input_lines[ 10 ]
initial
begin
	input_lines[10] = 1'b0;
end 
// input_lines[ 9 ]
initial
begin
	input_lines[9] = 1'b0;
end 
// input_lines[ 8 ]
initial
begin
	input_lines[8] = 1'b0;
end 
// input_lines[ 7 ]
initial
begin
	input_lines[7] = 1'b0;
end 
// input_lines[ 6 ]
initial
begin
	input_lines[6] = 1'b1;
end 
// input_lines[ 5 ]
initial
begin
	input_lines[5] = 1'b0;
end 
// input_lines[ 4 ]
initial
begin
	input_lines[4] = 1'b0;
end 
// input_lines[ 3 ]
initial
begin
	input_lines[3] = 1'b0;
end 
// input_lines[ 2 ]
initial
begin
	input_lines[2] = 1'b0;
end 
// input_lines[ 1 ]
initial
begin
	input_lines[1] = 1'b0;
end 
// input_lines[ 0 ]
initial
begin
	input_lines[0] = 1'b0;
end 
// selection_lines[ 3 ]
initial
begin
	selection_lines[3] = 1'b0;
	# 30000;
	repeat(6)
	begin
		selection_lines[3] = 1'b1;
		selection_lines[3] = #80000 1'b0;
		# 80000;
	end
	selection_lines[3] = 1'b1;
end 
// selection_lines[ 2 ]
initial
begin
	selection_lines[2] = 1'b1;
	# 30000;
	repeat(12)
	begin
		selection_lines[2] = 1'b0;
		selection_lines[2] = #40000 1'b1;
		# 40000;
	end
	selection_lines[2] = 1'b0;
end 
// selection_lines[ 1 ]
initial
begin
	selection_lines[1] = 1'b0;
	# 10000;
	repeat(24)
	begin
		selection_lines[1] = 1'b1;
		selection_lines[1] = #20000 1'b0;
		# 20000;
	end
	selection_lines[1] = 1'b1;
	selection_lines[1] = #20000 1'b0;
end 
// selection_lines[ 0 ]
always
begin
	selection_lines[0] = 1'b1;
	selection_lines[0] = #10000 1'b0;
	#10000;
end 

mux16_vlg_sample_tst tb_sample (
	.input_lines(input_lines),
	.selection_lines(selection_lines),
	.sampler_tx(sampler)
);

mux16_vlg_check_tst tb_out(
	.output_line(output_line),
	.sampler_rx(sampler)
);
endmodule

