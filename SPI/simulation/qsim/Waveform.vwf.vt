// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/10/2015 13:29:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    spi
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module spi_vlg_sample_tst(
	adc_sdo,
	adc_sdot,
	clk,
	ena,
	reset_n,
	sdio,
	sampler_tx
);
input  adc_sdo;
input  adc_sdot;
input  clk;
input  ena;
input  reset_n;
input  sdio;
output sampler_tx;

reg sample;
time current_time;
always @(adc_sdo or adc_sdot or clk or ena or reset_n or sdio)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module spi_vlg_check_tst (
	adc_sck,
	adc_sdi,
	adc_sdo,
	adc_sdot,
	convst,
	cs,
	sclk,
	sdio,
	sinitial,
	ssend,
	swait_between_sent,
	swait_input,
	swait_while_busy,
	test,
	sampler_rx
);
input  adc_sck;
input  adc_sdi;
input  adc_sdo;
input  adc_sdot;
input  convst;
input  cs;
input  sclk;
input  sdio;
input  sinitial;
input  ssend;
input  swait_between_sent;
input  swait_input;
input  swait_while_busy;
input  test;
input sampler_rx;

reg  adc_sck_expected;
reg  adc_sdi_expected;
reg  adc_sdo_expected;
reg  adc_sdot_expected;
reg  convst_expected;
reg  cs_expected;
reg  sclk_expected;
reg  sdio_expected;
reg  sinitial_expected;
reg  ssend_expected;
reg  swait_between_sent_expected;
reg  swait_input_expected;
reg  swait_while_busy_expected;
reg  test_expected;

reg  adc_sck_prev;
reg  adc_sdi_prev;
reg  adc_sdo_prev;
reg  adc_sdot_prev;
reg  convst_prev;
reg  cs_prev;
reg  sclk_prev;
reg  sdio_prev;
reg  sinitial_prev;
reg  ssend_prev;
reg  swait_between_sent_prev;
reg  swait_input_prev;
reg  swait_while_busy_prev;
reg  test_prev;

reg  adc_sck_expected_prev;
reg  adc_sdi_expected_prev;
reg  adc_sdo_expected_prev;
reg  adc_sdot_expected_prev;
reg  cs_expected_prev;
reg  sclk_expected_prev;
reg  sdio_expected_prev;
reg  sinitial_expected_prev;
reg  ssend_expected_prev;
reg  swait_between_sent_expected_prev;
reg  swait_input_expected_prev;
reg  swait_while_busy_expected_prev;
reg  test_expected_prev;

reg  last_adc_sck_exp;
reg  last_adc_sdi_exp;
reg  last_adc_sdo_exp;
reg  last_adc_sdot_exp;
reg  last_cs_exp;
reg  last_sclk_exp;
reg  last_sdio_exp;
reg  last_sinitial_exp;
reg  last_ssend_exp;
reg  last_swait_between_sent_exp;
reg  last_swait_input_exp;
reg  last_swait_while_busy_exp;
reg  last_test_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:14] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 14'b1;
end

// update real /o prevs

always @(trigger)
begin
	adc_sck_prev = adc_sck;
	adc_sdi_prev = adc_sdi;
	adc_sdo_prev = adc_sdo;
	adc_sdot_prev = adc_sdot;
	convst_prev = convst;
	cs_prev = cs;
	sclk_prev = sclk;
	sdio_prev = sdio;
	sinitial_prev = sinitial;
	ssend_prev = ssend;
	swait_between_sent_prev = swait_between_sent;
	swait_input_prev = swait_input;
	swait_while_busy_prev = swait_while_busy;
	test_prev = test;
end

// update expected /o prevs

always @(trigger)
begin
	adc_sck_expected_prev = adc_sck_expected;
	adc_sdi_expected_prev = adc_sdi_expected;
	adc_sdo_expected_prev = adc_sdo_expected;
	adc_sdot_expected_prev = adc_sdot_expected;
	cs_expected_prev = cs_expected;
	sclk_expected_prev = sclk_expected;
	sdio_expected_prev = sdio_expected;
	sinitial_expected_prev = sinitial_expected;
	ssend_expected_prev = ssend_expected;
	swait_between_sent_expected_prev = swait_between_sent_expected;
	swait_input_expected_prev = swait_input_expected;
	swait_while_busy_expected_prev = swait_while_busy_expected;
	test_expected_prev = test_expected;
end



// expected cs
initial
begin
	cs_expected = 1'bX;
end 

// expected sclk
initial
begin
	sclk_expected = 1'bX;
end 

// expected test
initial
begin
	test_expected = 1'bX;
end 

// expected sinitial
initial
begin
	sinitial_expected = 1'bX;
end 

// expected swait_input
initial
begin
	swait_input_expected = 1'bX;
end 

// expected ssend
initial
begin
	ssend_expected = 1'bX;
end 

// expected swait_while_busy
initial
begin
	swait_while_busy_expected = 1'bX;
end 

// expected swait_between_sent
initial
begin
	swait_between_sent_expected = 1'bX;
end 

// expected adc_sck
initial
begin
	adc_sck_expected = 1'bX;
end 

// expected adc_sdi
initial
begin
	adc_sdi_expected = 1'bX;
end 
// generate trigger
always @(adc_sck_expected or adc_sck or adc_sdi_expected or adc_sdi or adc_sdo_expected or adc_sdo or adc_sdot_expected or adc_sdot or convst_expected or convst or cs_expected or cs or sclk_expected or sclk or sdio_expected or sdio or sinitial_expected or sinitial or ssend_expected or ssend or swait_between_sent_expected or swait_between_sent or swait_input_expected or swait_input or swait_while_busy_expected or swait_while_busy or test_expected or test)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected adc_sck = %b | expected adc_sdi = %b | expected adc_sdo = %b | expected adc_sdot = %b | expected convst = %b | expected cs = %b | expected sclk = %b | expected sdio = %b | expected sinitial = %b | expected ssend = %b | expected swait_between_sent = %b | expected swait_input = %b | expected swait_while_busy = %b | expected test = %b | ",adc_sck_expected_prev,adc_sdi_expected_prev,adc_sdo_expected_prev,adc_sdot_expected_prev,convst_expected_prev,cs_expected_prev,sclk_expected_prev,sdio_expected_prev,sinitial_expected_prev,ssend_expected_prev,swait_between_sent_expected_prev,swait_input_expected_prev,swait_while_busy_expected_prev,test_expected_prev);
	$display("| real adc_sck = %b | real adc_sdi = %b | real adc_sdo = %b | real adc_sdot = %b | real convst = %b | real cs = %b | real sclk = %b | real sdio = %b | real sinitial = %b | real ssend = %b | real swait_between_sent = %b | real swait_input = %b | real swait_while_busy = %b | real test = %b | ",adc_sck_prev,adc_sdi_prev,adc_sdo_prev,adc_sdot_prev,convst_prev,cs_prev,sclk_prev,sdio_prev,sinitial_prev,ssend_prev,swait_between_sent_prev,swait_input_prev,swait_while_busy_prev,test_prev);
`endif
	if (
		( adc_sck_expected_prev !== 1'bx ) && ( adc_sck_prev !== adc_sck_expected_prev )
		&& ((adc_sck_expected_prev !== last_adc_sck_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_sck :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_sck_expected_prev);
		$display ("     Real value = %b", adc_sck_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_sck_exp = adc_sck_expected_prev;
	end
	if (
		( adc_sdi_expected_prev !== 1'bx ) && ( adc_sdi_prev !== adc_sdi_expected_prev )
		&& ((adc_sdi_expected_prev !== last_adc_sdi_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_sdi :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_sdi_expected_prev);
		$display ("     Real value = %b", adc_sdi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_adc_sdi_exp = adc_sdi_expected_prev;
	end
	if (
		( adc_sdo_expected_prev !== 1'bx ) && ( adc_sdo_prev !== adc_sdo_expected_prev )
		&& ((adc_sdo_expected_prev !== last_adc_sdo_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_sdo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_sdo_expected_prev);
		$display ("     Real value = %b", adc_sdo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_adc_sdo_exp = adc_sdo_expected_prev;
	end
	if (
		( adc_sdot_expected_prev !== 1'bx ) && ( adc_sdot_prev !== adc_sdot_expected_prev )
		&& ((adc_sdot_expected_prev !== last_adc_sdot_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_sdot :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_sdot_expected_prev);
		$display ("     Real value = %b", adc_sdot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_adc_sdot_exp = adc_sdot_expected_prev;
	end
	if (
		( cs_expected_prev !== 1'bx ) && ( cs_prev !== cs_expected_prev )
		&& ((cs_expected_prev !== last_cs_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cs :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cs_expected_prev);
		$display ("     Real value = %b", cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_cs_exp = cs_expected_prev;
	end
	if (
		( sclk_expected_prev !== 1'bx ) && ( sclk_prev !== sclk_expected_prev )
		&& ((sclk_expected_prev !== last_sclk_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sclk :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sclk_expected_prev);
		$display ("     Real value = %b", sclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sclk_exp = sclk_expected_prev;
	end
	if (
		( sdio_expected_prev !== 1'bx ) && ( sdio_prev !== sdio_expected_prev )
		&& ((sdio_expected_prev !== last_sdio_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdio :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdio_expected_prev);
		$display ("     Real value = %b", sdio_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sdio_exp = sdio_expected_prev;
	end
	if (
		( sinitial_expected_prev !== 1'bx ) && ( sinitial_prev !== sinitial_expected_prev )
		&& ((sinitial_expected_prev !== last_sinitial_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sinitial :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sinitial_expected_prev);
		$display ("     Real value = %b", sinitial_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_sinitial_exp = sinitial_expected_prev;
	end
	if (
		( ssend_expected_prev !== 1'bx ) && ( ssend_prev !== ssend_expected_prev )
		&& ((ssend_expected_prev !== last_ssend_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssend :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssend_expected_prev);
		$display ("     Real value = %b", ssend_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ssend_exp = ssend_expected_prev;
	end
	if (
		( swait_between_sent_expected_prev !== 1'bx ) && ( swait_between_sent_prev !== swait_between_sent_expected_prev )
		&& ((swait_between_sent_expected_prev !== last_swait_between_sent_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port swait_between_sent :: @time = %t",  $realtime);
		$display ("     Expected value = %b", swait_between_sent_expected_prev);
		$display ("     Real value = %b", swait_between_sent_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_swait_between_sent_exp = swait_between_sent_expected_prev;
	end
	if (
		( swait_input_expected_prev !== 1'bx ) && ( swait_input_prev !== swait_input_expected_prev )
		&& ((swait_input_expected_prev !== last_swait_input_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port swait_input :: @time = %t",  $realtime);
		$display ("     Expected value = %b", swait_input_expected_prev);
		$display ("     Real value = %b", swait_input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_swait_input_exp = swait_input_expected_prev;
	end
	if (
		( swait_while_busy_expected_prev !== 1'bx ) && ( swait_while_busy_prev !== swait_while_busy_expected_prev )
		&& ((swait_while_busy_expected_prev !== last_swait_while_busy_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port swait_while_busy :: @time = %t",  $realtime);
		$display ("     Expected value = %b", swait_while_busy_expected_prev);
		$display ("     Real value = %b", swait_while_busy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_swait_while_busy_exp = swait_while_busy_expected_prev;
	end
	if (
		( test_expected_prev !== 1'bx ) && ( test_prev !== test_expected_prev )
		&& ((test_expected_prev !== last_test_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_expected_prev);
		$display ("     Real value = %b", test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_test_exp = test_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module spi_vlg_vec_tst();
// constants                                           
// general purpose registers
reg treg_adc_sdo;
reg treg_adc_sdot;
reg clk;
reg ena;
reg reset_n;
reg treg_sdio;
// wires                                               
wire adc_sck;
wire adc_sdi;
wire adc_sdo;
wire adc_sdot;
wire convst;
wire cs;
wire sclk;
wire sdio;
wire sinitial;
wire ssend;
wire swait_between_sent;
wire swait_input;
wire swait_while_busy;
wire test;

wire sampler;                             

// assign statements (if any)                          
assign adc_sdo = treg_adc_sdo;
assign adc_sdot = treg_adc_sdot;
assign sdio = treg_sdio;
spi i1 (
// port map - connection between master ports and signals/registers   
	.adc_sck(adc_sck),
	.adc_sdi(adc_sdi),
	.adc_sdo(adc_sdo),
	.adc_sdot(adc_sdot),
	.clk(clk),
	.convst(convst),
	.cs(cs),
	.ena(ena),
	.reset_n(reset_n),
	.sclk(sclk),
	.sdio(sdio),
	.sinitial(sinitial),
	.ssend(ssend),
	.swait_between_sent(swait_between_sent),
	.swait_input(swait_input),
	.swait_while_busy(swait_while_busy),
	.test(test)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset_n
initial
begin
	reset_n = 1'b1;
	reset_n = #64640000 1'b0;
	reset_n = #10240000 1'b1;
end 

// ena
initial
begin
	ena = 1'b0;
	ena = #5760000 1'b1;
	ena = #44800000 1'b0;
	ena = #11520000 1'b1;
end 

// sdio
initial
begin
	treg_sdio = 1'bZ;
end 

// adc_sdo
initial
begin
	treg_adc_sdo = 1'bZ;
end 

// adc_sdot
initial
begin
	treg_adc_sdot = 1'bZ;
end 

spi_vlg_sample_tst tb_sample (
	.adc_sdo(adc_sdo),
	.adc_sdot(adc_sdot),
	.clk(clk),
	.ena(ena),
	.reset_n(reset_n),
	.sdio(sdio),
	.sampler_tx(sampler)
);

spi_vlg_check_tst tb_out(
	.adc_sck(adc_sck),
	.adc_sdi(adc_sdi),
	.adc_sdo(adc_sdo),
	.adc_sdot(adc_sdot),
	.convst(convst),
	.cs(cs),
	.sclk(sclk),
	.sdio(sdio),
	.sinitial(sinitial),
	.ssend(ssend),
	.swait_between_sent(swait_between_sent),
	.swait_input(swait_input),
	.swait_while_busy(swait_while_busy),
	.test(test),
	.sampler_rx(sampler)
);
endmodule

