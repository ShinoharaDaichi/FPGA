|servo2
clk => servo:servo_parallel_input.clk
clk => servo:servo_incremental_input.clk
duty[0] => servo:servo_parallel_input.duty[0]
duty[0] => servo:servo_incremental_input.duty[0]
duty[1] => servo:servo_parallel_input.duty[1]
duty[1] => servo:servo_incremental_input.duty[1]
duty[2] => servo:servo_parallel_input.duty[2]
duty[2] => servo:servo_incremental_input.duty[2]
duty[3] => servo:servo_parallel_input.duty[3]
duty[3] => servo:servo_incremental_input.duty[3]
duty[4] => servo:servo_parallel_input.duty[4]
duty[4] => servo:servo_incremental_input.duty[4]
duty[5] => servo:servo_parallel_input.duty[5]
duty[5] => servo:servo_incremental_input.duty[5]
duty[6] => servo:servo_parallel_input.duty[6]
duty[6] => servo:servo_incremental_input.duty[6]
duty[7] => servo:servo_parallel_input.duty[7]
duty[7] => servo:servo_incremental_input.duty[7]
pwm_output_parallel << servo:servo_parallel_input.pwm_output
pwm_output_incremental << servo:servo_incremental_input.pwm_output
enable_pwm => servo:servo_parallel_input.enable_pwm
enable_pwm => servo:servo_incremental_input.enable_pwm
reset_pwm => servo:servo_parallel_input.reset_pwm
reset_pwm => servo:servo_incremental_input.reset_pwm
changeup => servo:servo_parallel_input.changeup
changeup => servo:servo_incremental_input.changeup
changedown => servo:servo_parallel_input.changedown
changedown => servo:servo_incremental_input.changedown
HEX0[0] << servo:servo_parallel_input.HEX0[0]
HEX0[1] << servo:servo_parallel_input.HEX0[1]
HEX0[2] << servo:servo_parallel_input.HEX0[2]
HEX0[3] << servo:servo_parallel_input.HEX0[3]
HEX0[4] << servo:servo_parallel_input.HEX0[4]
HEX0[5] << servo:servo_parallel_input.HEX0[5]
HEX0[6] << servo:servo_parallel_input.HEX0[6]
HEX1[0] << servo:servo_parallel_input.HEX1[0]
HEX1[1] << servo:servo_parallel_input.HEX1[1]
HEX1[2] << servo:servo_parallel_input.HEX1[2]
HEX1[3] << servo:servo_parallel_input.HEX1[3]
HEX1[4] << servo:servo_parallel_input.HEX1[4]
HEX1[5] << servo:servo_parallel_input.HEX1[5]
HEX1[6] << servo:servo_parallel_input.HEX1[6]
HEX2[0] << servo:servo_incremental_input.HEX0[0]
HEX2[1] << servo:servo_incremental_input.HEX0[1]
HEX2[2] << servo:servo_incremental_input.HEX0[2]
HEX2[3] << servo:servo_incremental_input.HEX0[3]
HEX2[4] << servo:servo_incremental_input.HEX0[4]
HEX2[5] << servo:servo_incremental_input.HEX0[5]
HEX2[6] << servo:servo_incremental_input.HEX0[6]
HEX3[0] << servo:servo_incremental_input.HEX1[0]
HEX3[1] << servo:servo_incremental_input.HEX1[1]
HEX3[2] << servo:servo_incremental_input.HEX1[2]
HEX3[3] << servo:servo_incremental_input.HEX1[3]
HEX3[4] << servo:servo_incremental_input.HEX1[4]
HEX3[5] << servo:servo_incremental_input.HEX1[5]
HEX3[6] << servo:servo_incremental_input.HEX1[6]


|servo2|servo:servo_parallel_input
clk => single_pwm:pwm_1.clk
duty[0] => single_pwm:pwm_1.duty[0]
duty[0] => double_segment7:quad_segment7_1.number[0]
duty[1] => single_pwm:pwm_1.duty[1]
duty[1] => double_segment7:quad_segment7_1.number[1]
duty[2] => single_pwm:pwm_1.duty[2]
duty[2] => double_segment7:quad_segment7_1.number[2]
duty[3] => single_pwm:pwm_1.duty[3]
duty[3] => double_segment7:quad_segment7_1.number[3]
duty[4] => single_pwm:pwm_1.duty[4]
duty[4] => double_segment7:quad_segment7_1.number[4]
duty[5] => single_pwm:pwm_1.duty[5]
duty[5] => double_segment7:quad_segment7_1.number[5]
duty[6] => single_pwm:pwm_1.duty[6]
duty[6] => double_segment7:quad_segment7_1.number[6]
duty[7] => single_pwm:pwm_1.duty[7]
duty[7] => double_segment7:quad_segment7_1.number[7]
pwm_output <= single_pwm:pwm_1.pwm_out
enable_pwm => single_pwm:pwm_1.ena
reset_pwm => single_pwm:pwm_1.reset_n
changeup => ~NO_FANOUT~
changedown => ~NO_FANOUT~
HEX0[0] <= double_segment7:quad_segment7_1.HEX0[0]
HEX0[1] <= double_segment7:quad_segment7_1.HEX0[1]
HEX0[2] <= double_segment7:quad_segment7_1.HEX0[2]
HEX0[3] <= double_segment7:quad_segment7_1.HEX0[3]
HEX0[4] <= double_segment7:quad_segment7_1.HEX0[4]
HEX0[5] <= double_segment7:quad_segment7_1.HEX0[5]
HEX0[6] <= double_segment7:quad_segment7_1.HEX0[6]
HEX1[0] <= double_segment7:quad_segment7_1.HEX1[0]
HEX1[1] <= double_segment7:quad_segment7_1.HEX1[1]
HEX1[2] <= double_segment7:quad_segment7_1.HEX1[2]
HEX1[3] <= double_segment7:quad_segment7_1.HEX1[3]
HEX1[4] <= double_segment7:quad_segment7_1.HEX1[4]
HEX1[5] <= double_segment7:quad_segment7_1.HEX1[5]
HEX1[6] <= double_segment7:quad_segment7_1.HEX1[6]
HEX2[0] <= <GND>
HEX2[1] <= <GND>
HEX2[2] <= <GND>
HEX2[3] <= <GND>
HEX2[4] <= <GND>
HEX2[5] <= <GND>
HEX2[6] <= <GND>
HEX3[0] <= <GND>
HEX3[1] <= <GND>
HEX3[2] <= <GND>
HEX3[3] <= <GND>
HEX3[4] <= <GND>
HEX3[5] <= <GND>
HEX3[6] <= <GND>


|servo2|servo:servo_parallel_input|single_pwm:pwm_1
clk => half_duty[0].CLK
clk => half_duty[1].CLK
clk => half_duty[2].CLK
clk => half_duty[3].CLK
clk => half_duty[4].CLK
clk => half_duty_new[0].CLK
clk => half_duty_new[1].CLK
clk => half_duty_new[2].CLK
clk => half_duty_new[3].CLK
clk => half_duty_new[4].CLK
clk => pwm_out~reg0.CLK
clk => count[0].CLK
clk => count[1].CLK
clk => count[2].CLK
clk => count[3].CLK
clk => count[4].CLK
clk => count[5].CLK
reset_n => pwm_out~reg0.ACLR
reset_n => count[0].ACLR
reset_n => count[1].ACLR
reset_n => count[2].ACLR
reset_n => count[3].ACLR
reset_n => count[4].ACLR
reset_n => count[5].ACLR
reset_n => half_duty[0].ENA
reset_n => half_duty_new[4].ENA
reset_n => half_duty_new[3].ENA
reset_n => half_duty_new[2].ENA
reset_n => half_duty_new[1].ENA
reset_n => half_duty_new[0].ENA
reset_n => half_duty[4].ENA
reset_n => half_duty[3].ENA
reset_n => half_duty[2].ENA
reset_n => half_duty[1].ENA
ena => half_duty_new.OUTPUTSELECT
ena => half_duty_new.OUTPUTSELECT
ena => half_duty_new.OUTPUTSELECT
ena => half_duty_new.OUTPUTSELECT
ena => half_duty_new.OUTPUTSELECT
duty[0] => Mult0.IN13
duty[1] => Mult0.IN12
duty[2] => Mult0.IN11
duty[3] => Mult0.IN10
duty[4] => Mult0.IN9
duty[5] => Mult0.IN8
duty[6] => Mult0.IN7
duty[7] => Mult0.IN6
pwm_out <= pwm_out~reg0.DB_MAX_OUTPUT_PORT_TYPE


|servo2|servo:servo_parallel_input|double_segment7:quad_segment7_1
number[0] => segment7:LSB_segment7.digit[0]
number[1] => LessThan5.IN8
number[1] => Add5.IN8
number[1] => digit1[1].DATAA
number[2] => LessThan3.IN8
number[2] => Add3.IN8
number[2] => bcd.DATAA
number[3] => LessThan2.IN8
number[3] => Add2.IN8
number[3] => bcd.DATAA
number[4] => LessThan1.IN8
number[4] => Add1.IN8
number[4] => bcd.DATAA
number[5] => LessThan0.IN6
number[5] => Add0.IN6
number[5] => bcd.DATAA
number[6] => LessThan0.IN5
number[6] => Add0.IN5
number[6] => bcd.DATAA
number[7] => LessThan0.IN4
number[7] => Add0.IN4
number[7] => bcd.DATAA
input => ~NO_FANOUT~
cout <= <GND>
HEX0[0] <= segment7:LSB_segment7.HEX[0]
HEX0[1] <= segment7:LSB_segment7.HEX[1]
HEX0[2] <= segment7:LSB_segment7.HEX[2]
HEX0[3] <= segment7:LSB_segment7.HEX[3]
HEX0[4] <= segment7:LSB_segment7.HEX[4]
HEX0[5] <= segment7:LSB_segment7.HEX[5]
HEX0[6] <= segment7:LSB_segment7.HEX[6]
HEX1[0] <= segment7:MSB_segment7.HEX[0]
HEX1[1] <= segment7:MSB_segment7.HEX[1]
HEX1[2] <= segment7:MSB_segment7.HEX[2]
HEX1[3] <= segment7:MSB_segment7.HEX[3]
HEX1[4] <= segment7:MSB_segment7.HEX[4]
HEX1[5] <= segment7:MSB_segment7.HEX[5]
HEX1[6] <= segment7:MSB_segment7.HEX[6]


|servo2|servo:servo_parallel_input|double_segment7:quad_segment7_1|segment7:LSB_segment7
input => ~NO_FANOUT~
digit[0] => Mux0.IN19
digit[0] => Mux1.IN19
digit[0] => Mux2.IN10
digit[0] => Mux3.IN19
digit[0] => Mux4.IN10
digit[0] => Mux5.IN10
digit[0] => Mux6.IN19
digit[1] => Mux0.IN18
digit[1] => Mux1.IN18
digit[1] => Mux2.IN9
digit[1] => Mux3.IN18
digit[1] => Mux4.IN9
digit[1] => Mux5.IN9
digit[1] => Mux6.IN18
digit[2] => Mux0.IN17
digit[2] => Mux1.IN17
digit[2] => Mux2.IN8
digit[2] => Mux3.IN17
digit[2] => Mux4.IN8
digit[2] => Mux5.IN8
digit[2] => Mux6.IN17
digit[3] => Mux0.IN16
digit[3] => Mux1.IN16
digit[3] => Mux3.IN16
digit[3] => Mux6.IN16
cout <= <GND>
HEX[0] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
HEX[1] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
HEX[2] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
HEX[3] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
HEX[4] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
HEX[5] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
HEX[6] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|servo2|servo:servo_parallel_input|double_segment7:quad_segment7_1|segment7:MSB_segment7
input => ~NO_FANOUT~
digit[0] => Mux0.IN19
digit[0] => Mux1.IN19
digit[0] => Mux2.IN10
digit[0] => Mux3.IN19
digit[0] => Mux4.IN10
digit[0] => Mux5.IN10
digit[0] => Mux6.IN19
digit[1] => Mux0.IN18
digit[1] => Mux1.IN18
digit[1] => Mux2.IN9
digit[1] => Mux3.IN18
digit[1] => Mux4.IN9
digit[1] => Mux5.IN9
digit[1] => Mux6.IN18
digit[2] => Mux0.IN17
digit[2] => Mux1.IN17
digit[2] => Mux2.IN8
digit[2] => Mux3.IN17
digit[2] => Mux4.IN8
digit[2] => Mux5.IN8
digit[2] => Mux6.IN17
digit[3] => Mux0.IN16
digit[3] => Mux1.IN16
digit[3] => Mux3.IN16
digit[3] => Mux6.IN16
cout <= <GND>
HEX[0] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
HEX[1] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
HEX[2] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
HEX[3] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
HEX[4] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
HEX[5] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
HEX[6] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|servo2|servo:servo_incremental_input
clk => single_pwm:pwm_1.clk
clk => duty_value[0].CLK
clk => duty_value[1].CLK
clk => duty_value[2].CLK
clk => duty_value[3].CLK
clk => duty_value[4].CLK
clk => duty_value[5].CLK
clk => duty_value[6].CLK
clk => duty_value[7].CLK
clk => lastChangedown.CLK
clk => lastChangeup.CLK
duty[0] => ~NO_FANOUT~
duty[1] => ~NO_FANOUT~
duty[2] => ~NO_FANOUT~
duty[3] => ~NO_FANOUT~
duty[4] => ~NO_FANOUT~
duty[5] => ~NO_FANOUT~
duty[6] => ~NO_FANOUT~
duty[7] => ~NO_FANOUT~
pwm_output <= single_pwm:pwm_1.pwm_out
enable_pwm => single_pwm:pwm_1.ena
reset_pwm => single_pwm:pwm_1.reset_n
changeup => lastChangeup.DATAIN
changeup => process_0.IN1
changedown => lastChangedown.DATAIN
changedown => process_0.IN1
HEX0[0] <= double_segment7:quad_segment7_1.HEX0[0]
HEX0[1] <= double_segment7:quad_segment7_1.HEX0[1]
HEX0[2] <= double_segment7:quad_segment7_1.HEX0[2]
HEX0[3] <= double_segment7:quad_segment7_1.HEX0[3]
HEX0[4] <= double_segment7:quad_segment7_1.HEX0[4]
HEX0[5] <= double_segment7:quad_segment7_1.HEX0[5]
HEX0[6] <= double_segment7:quad_segment7_1.HEX0[6]
HEX1[0] <= double_segment7:quad_segment7_1.HEX1[0]
HEX1[1] <= double_segment7:quad_segment7_1.HEX1[1]
HEX1[2] <= double_segment7:quad_segment7_1.HEX1[2]
HEX1[3] <= double_segment7:quad_segment7_1.HEX1[3]
HEX1[4] <= double_segment7:quad_segment7_1.HEX1[4]
HEX1[5] <= double_segment7:quad_segment7_1.HEX1[5]
HEX1[6] <= double_segment7:quad_segment7_1.HEX1[6]
HEX2[0] <= <GND>
HEX2[1] <= <GND>
HEX2[2] <= <GND>
HEX2[3] <= <GND>
HEX2[4] <= <GND>
HEX2[5] <= <GND>
HEX2[6] <= <GND>
HEX3[0] <= <GND>
HEX3[1] <= <GND>
HEX3[2] <= <GND>
HEX3[3] <= <GND>
HEX3[4] <= <GND>
HEX3[5] <= <GND>
HEX3[6] <= <GND>


|servo2|servo:servo_incremental_input|single_pwm:pwm_1
clk => half_duty[0].CLK
clk => half_duty[1].CLK
clk => half_duty[2].CLK
clk => half_duty[3].CLK
clk => half_duty[4].CLK
clk => half_duty_new[0].CLK
clk => half_duty_new[1].CLK
clk => half_duty_new[2].CLK
clk => half_duty_new[3].CLK
clk => half_duty_new[4].CLK
clk => pwm_out~reg0.CLK
clk => count[0].CLK
clk => count[1].CLK
clk => count[2].CLK
clk => count[3].CLK
clk => count[4].CLK
clk => count[5].CLK
reset_n => pwm_out~reg0.ACLR
reset_n => count[0].ACLR
reset_n => count[1].ACLR
reset_n => count[2].ACLR
reset_n => count[3].ACLR
reset_n => count[4].ACLR
reset_n => count[5].ACLR
reset_n => half_duty[0].ENA
reset_n => half_duty_new[4].ENA
reset_n => half_duty_new[3].ENA
reset_n => half_duty_new[2].ENA
reset_n => half_duty_new[1].ENA
reset_n => half_duty_new[0].ENA
reset_n => half_duty[4].ENA
reset_n => half_duty[3].ENA
reset_n => half_duty[2].ENA
reset_n => half_duty[1].ENA
ena => half_duty_new.OUTPUTSELECT
ena => half_duty_new.OUTPUTSELECT
ena => half_duty_new.OUTPUTSELECT
ena => half_duty_new.OUTPUTSELECT
ena => half_duty_new.OUTPUTSELECT
duty[0] => Mult0.IN13
duty[1] => Mult0.IN12
duty[2] => Mult0.IN11
duty[3] => Mult0.IN10
duty[4] => Mult0.IN9
duty[5] => Mult0.IN8
duty[6] => Mult0.IN7
duty[7] => Mult0.IN6
pwm_out <= pwm_out~reg0.DB_MAX_OUTPUT_PORT_TYPE


|servo2|servo:servo_incremental_input|double_segment7:quad_segment7_1
number[0] => segment7:LSB_segment7.digit[0]
number[1] => LessThan5.IN8
number[1] => Add5.IN8
number[1] => digit1[1].DATAA
number[2] => LessThan3.IN8
number[2] => Add3.IN8
number[2] => bcd.DATAA
number[3] => LessThan2.IN8
number[3] => Add2.IN8
number[3] => bcd.DATAA
number[4] => LessThan1.IN8
number[4] => Add1.IN8
number[4] => bcd.DATAA
number[5] => LessThan0.IN6
number[5] => Add0.IN6
number[5] => bcd.DATAA
number[6] => LessThan0.IN5
number[6] => Add0.IN5
number[6] => bcd.DATAA
number[7] => LessThan0.IN4
number[7] => Add0.IN4
number[7] => bcd.DATAA
input => ~NO_FANOUT~
cout <= <GND>
HEX0[0] <= segment7:LSB_segment7.HEX[0]
HEX0[1] <= segment7:LSB_segment7.HEX[1]
HEX0[2] <= segment7:LSB_segment7.HEX[2]
HEX0[3] <= segment7:LSB_segment7.HEX[3]
HEX0[4] <= segment7:LSB_segment7.HEX[4]
HEX0[5] <= segment7:LSB_segment7.HEX[5]
HEX0[6] <= segment7:LSB_segment7.HEX[6]
HEX1[0] <= segment7:MSB_segment7.HEX[0]
HEX1[1] <= segment7:MSB_segment7.HEX[1]
HEX1[2] <= segment7:MSB_segment7.HEX[2]
HEX1[3] <= segment7:MSB_segment7.HEX[3]
HEX1[4] <= segment7:MSB_segment7.HEX[4]
HEX1[5] <= segment7:MSB_segment7.HEX[5]
HEX1[6] <= segment7:MSB_segment7.HEX[6]


|servo2|servo:servo_incremental_input|double_segment7:quad_segment7_1|segment7:LSB_segment7
input => ~NO_FANOUT~
digit[0] => Mux0.IN19
digit[0] => Mux1.IN19
digit[0] => Mux2.IN10
digit[0] => Mux3.IN19
digit[0] => Mux4.IN10
digit[0] => Mux5.IN10
digit[0] => Mux6.IN19
digit[1] => Mux0.IN18
digit[1] => Mux1.IN18
digit[1] => Mux2.IN9
digit[1] => Mux3.IN18
digit[1] => Mux4.IN9
digit[1] => Mux5.IN9
digit[1] => Mux6.IN18
digit[2] => Mux0.IN17
digit[2] => Mux1.IN17
digit[2] => Mux2.IN8
digit[2] => Mux3.IN17
digit[2] => Mux4.IN8
digit[2] => Mux5.IN8
digit[2] => Mux6.IN17
digit[3] => Mux0.IN16
digit[3] => Mux1.IN16
digit[3] => Mux3.IN16
digit[3] => Mux6.IN16
cout <= <GND>
HEX[0] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
HEX[1] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
HEX[2] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
HEX[3] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
HEX[4] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
HEX[5] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
HEX[6] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|servo2|servo:servo_incremental_input|double_segment7:quad_segment7_1|segment7:MSB_segment7
input => ~NO_FANOUT~
digit[0] => Mux0.IN19
digit[0] => Mux1.IN19
digit[0] => Mux2.IN10
digit[0] => Mux3.IN19
digit[0] => Mux4.IN10
digit[0] => Mux5.IN10
digit[0] => Mux6.IN19
digit[1] => Mux0.IN18
digit[1] => Mux1.IN18
digit[1] => Mux2.IN9
digit[1] => Mux3.IN18
digit[1] => Mux4.IN9
digit[1] => Mux5.IN9
digit[1] => Mux6.IN18
digit[2] => Mux0.IN17
digit[2] => Mux1.IN17
digit[2] => Mux2.IN8
digit[2] => Mux3.IN17
digit[2] => Mux4.IN8
digit[2] => Mux5.IN8
digit[2] => Mux6.IN17
digit[3] => Mux0.IN16
digit[3] => Mux1.IN16
digit[3] => Mux3.IN16
digit[3] => Mux6.IN16
cout <= <GND>
HEX[0] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
HEX[1] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
HEX[2] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
HEX[3] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
HEX[4] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
HEX[5] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
HEX[6] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


