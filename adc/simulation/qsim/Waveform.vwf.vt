// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/17/2015 00:16:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    adc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module adc_vlg_sample_tst(
	adc_sdo,
	clk,
	ena,
	reset_n,
	sampler_tx
);
input  adc_sdo;
input  clk;
input  ena;
input  reset_n;
output sampler_tx;

reg sample;
time current_time;
always @(adc_sdo or clk or ena or reset_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module adc_vlg_check_tst (
	adc_sck,
	adc_sdi,
	convst,
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	leds_output,
	outputs,
	sampler_rx
);
input  adc_sck;
input  adc_sdi;
input  convst;
input [6:0] HEX0;
input [6:0] HEX1;
input [6:0] HEX2;
input [6:0] HEX3;
input [7:0] leds_output;
input [11:0] outputs;
input sampler_rx;

reg  adc_sck_expected;
reg  adc_sdi_expected;
reg  convst_expected;
reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX3_expected;
reg [7:0] leds_output_expected;
reg [11:0] outputs_expected;

reg  adc_sck_prev;
reg  adc_sdi_prev;
reg  convst_prev;
reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX3_prev;
reg [7:0] leds_output_prev;
reg [11:0] outputs_prev;

reg  adc_sck_expected_prev;
reg  adc_sdi_expected_prev;
reg  convst_expected_prev;
reg [11:0] outputs_expected_prev;

reg  last_adc_sck_exp;
reg  last_adc_sdi_exp;
reg  last_convst_exp;
reg [11:0] last_outputs_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	adc_sck_prev = adc_sck;
	adc_sdi_prev = adc_sdi;
	convst_prev = convst;
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	leds_output_prev = leds_output;
	outputs_prev = outputs;
end

// update expected /o prevs

always @(trigger)
begin
	adc_sck_expected_prev = adc_sck_expected;
	adc_sdi_expected_prev = adc_sdi_expected;
	convst_expected_prev = convst_expected;
	outputs_expected_prev = outputs_expected;
end



// expected convst
initial
begin
	convst_expected = 1'bX;
end 

// expected adc_sdi
initial
begin
	adc_sdi_expected = 1'bX;
end 

// expected adc_sck
initial
begin
	adc_sck_expected = 1'bX;
end 
// expected outputs[ 11 ]
initial
begin
	outputs_expected[11] = 1'bX;
end 
// expected outputs[ 10 ]
initial
begin
	outputs_expected[10] = 1'bX;
end 
// expected outputs[ 9 ]
initial
begin
	outputs_expected[9] = 1'bX;
end 
// expected outputs[ 8 ]
initial
begin
	outputs_expected[8] = 1'bX;
end 
// expected outputs[ 7 ]
initial
begin
	outputs_expected[7] = 1'bX;
end 
// expected outputs[ 6 ]
initial
begin
	outputs_expected[6] = 1'bX;
end 
// expected outputs[ 5 ]
initial
begin
	outputs_expected[5] = 1'bX;
end 
// expected outputs[ 4 ]
initial
begin
	outputs_expected[4] = 1'bX;
end 
// expected outputs[ 3 ]
initial
begin
	outputs_expected[3] = 1'bX;
end 
// expected outputs[ 2 ]
initial
begin
	outputs_expected[2] = 1'bX;
end 
// expected outputs[ 1 ]
initial
begin
	outputs_expected[1] = 1'bX;
end 
// expected outputs[ 0 ]
initial
begin
	outputs_expected[0] = 1'bX;
end 
// generate trigger
always @(adc_sck_expected or adc_sck or adc_sdi_expected or adc_sdi or convst_expected or convst or HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or leds_output_expected or leds_output or outputs_expected or outputs)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected adc_sck = %b | expected adc_sdi = %b | expected convst = %b | expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected leds_output = %b | expected outputs = %b | ",adc_sck_expected_prev,adc_sdi_expected_prev,convst_expected_prev,HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,leds_output_expected_prev,outputs_expected_prev);
	$display("| real adc_sck = %b | real adc_sdi = %b | real convst = %b | real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real leds_output = %b | real outputs = %b | ",adc_sck_prev,adc_sdi_prev,convst_prev,HEX0_prev,HEX1_prev,HEX2_prev,HEX3_prev,leds_output_prev,outputs_prev);
`endif
	if (
		( adc_sck_expected_prev !== 1'bx ) && ( adc_sck_prev !== adc_sck_expected_prev )
		&& ((adc_sck_expected_prev !== last_adc_sck_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_sck :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_sck_expected_prev);
		$display ("     Real value = %b", adc_sck_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_adc_sck_exp = adc_sck_expected_prev;
	end
	if (
		( adc_sdi_expected_prev !== 1'bx ) && ( adc_sdi_prev !== adc_sdi_expected_prev )
		&& ((adc_sdi_expected_prev !== last_adc_sdi_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adc_sdi :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adc_sdi_expected_prev);
		$display ("     Real value = %b", adc_sdi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_adc_sdi_exp = adc_sdi_expected_prev;
	end
	if (
		( convst_expected_prev !== 1'bx ) && ( convst_prev !== convst_expected_prev )
		&& ((convst_expected_prev !== last_convst_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port convst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", convst_expected_prev);
		$display ("     Real value = %b", convst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_convst_exp = convst_expected_prev;
	end
	if (
		( outputs_expected_prev[0] !== 1'bx ) && ( outputs_prev[0] !== outputs_expected_prev[0] )
		&& ((outputs_expected_prev[0] !== last_outputs_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputs_expected_prev);
		$display ("     Real value = %b", outputs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_outputs_exp[0] = outputs_expected_prev[0];
	end
	if (
		( outputs_expected_prev[1] !== 1'bx ) && ( outputs_prev[1] !== outputs_expected_prev[1] )
		&& ((outputs_expected_prev[1] !== last_outputs_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputs_expected_prev);
		$display ("     Real value = %b", outputs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_outputs_exp[1] = outputs_expected_prev[1];
	end
	if (
		( outputs_expected_prev[2] !== 1'bx ) && ( outputs_prev[2] !== outputs_expected_prev[2] )
		&& ((outputs_expected_prev[2] !== last_outputs_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputs_expected_prev);
		$display ("     Real value = %b", outputs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_outputs_exp[2] = outputs_expected_prev[2];
	end
	if (
		( outputs_expected_prev[3] !== 1'bx ) && ( outputs_prev[3] !== outputs_expected_prev[3] )
		&& ((outputs_expected_prev[3] !== last_outputs_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputs[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputs_expected_prev);
		$display ("     Real value = %b", outputs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_outputs_exp[3] = outputs_expected_prev[3];
	end
	if (
		( outputs_expected_prev[4] !== 1'bx ) && ( outputs_prev[4] !== outputs_expected_prev[4] )
		&& ((outputs_expected_prev[4] !== last_outputs_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputs[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputs_expected_prev);
		$display ("     Real value = %b", outputs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_outputs_exp[4] = outputs_expected_prev[4];
	end
	if (
		( outputs_expected_prev[5] !== 1'bx ) && ( outputs_prev[5] !== outputs_expected_prev[5] )
		&& ((outputs_expected_prev[5] !== last_outputs_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputs[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputs_expected_prev);
		$display ("     Real value = %b", outputs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_outputs_exp[5] = outputs_expected_prev[5];
	end
	if (
		( outputs_expected_prev[6] !== 1'bx ) && ( outputs_prev[6] !== outputs_expected_prev[6] )
		&& ((outputs_expected_prev[6] !== last_outputs_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputs[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputs_expected_prev);
		$display ("     Real value = %b", outputs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_outputs_exp[6] = outputs_expected_prev[6];
	end
	if (
		( outputs_expected_prev[7] !== 1'bx ) && ( outputs_prev[7] !== outputs_expected_prev[7] )
		&& ((outputs_expected_prev[7] !== last_outputs_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputs[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputs_expected_prev);
		$display ("     Real value = %b", outputs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_outputs_exp[7] = outputs_expected_prev[7];
	end
	if (
		( outputs_expected_prev[8] !== 1'bx ) && ( outputs_prev[8] !== outputs_expected_prev[8] )
		&& ((outputs_expected_prev[8] !== last_outputs_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputs[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputs_expected_prev);
		$display ("     Real value = %b", outputs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_outputs_exp[8] = outputs_expected_prev[8];
	end
	if (
		( outputs_expected_prev[9] !== 1'bx ) && ( outputs_prev[9] !== outputs_expected_prev[9] )
		&& ((outputs_expected_prev[9] !== last_outputs_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputs[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputs_expected_prev);
		$display ("     Real value = %b", outputs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_outputs_exp[9] = outputs_expected_prev[9];
	end
	if (
		( outputs_expected_prev[10] !== 1'bx ) && ( outputs_prev[10] !== outputs_expected_prev[10] )
		&& ((outputs_expected_prev[10] !== last_outputs_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputs[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputs_expected_prev);
		$display ("     Real value = %b", outputs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_outputs_exp[10] = outputs_expected_prev[10];
	end
	if (
		( outputs_expected_prev[11] !== 1'bx ) && ( outputs_prev[11] !== outputs_expected_prev[11] )
		&& ((outputs_expected_prev[11] !== last_outputs_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputs[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputs_expected_prev);
		$display ("     Real value = %b", outputs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_outputs_exp[11] = outputs_expected_prev[11];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module adc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg adc_sdo;
reg clk;
reg ena;
reg reset_n;
// wires                                               
wire adc_sck;
wire adc_sdi;
wire convst;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [7:0] leds_output;
wire [11:0] outputs;

wire sampler;                             

// assign statements (if any)                          
adc i1 (
// port map - connection between master ports and signals/registers   
	.adc_sck(adc_sck),
	.adc_sdi(adc_sdi),
	.adc_sdo(adc_sdo),
	.clk(clk),
	.convst(convst),
	.ena(ena),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.leds_output(leds_output),
	.outputs(outputs),
	.reset_n(reset_n)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// ena
initial
begin
	ena = 1'b1;
end 

// reset_n
initial
begin
	reset_n = 1'b1;
end 

// adc_sdo
initial
begin
	adc_sdo = 1'b1;
	adc_sdo = #1520000 1'b0;
	adc_sdo = #80000 1'b1;
	adc_sdo = #400000 1'b0;
	adc_sdo = #100000 1'b1;
	adc_sdo = #380000 1'b0;
	adc_sdo = #2800000 1'b1;
	adc_sdo = #20000 1'b0;
	adc_sdo = #60000 1'b1;
end 

adc_vlg_sample_tst tb_sample (
	.adc_sdo(adc_sdo),
	.clk(clk),
	.ena(ena),
	.reset_n(reset_n),
	.sampler_tx(sampler)
);

adc_vlg_check_tst tb_out(
	.adc_sck(adc_sck),
	.adc_sdi(adc_sdi),
	.convst(convst),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.leds_output(leds_output),
	.outputs(outputs),
	.sampler_rx(sampler)
);
endmodule

