LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY adc IS
	GENERIC(
		nbits_cmd						:	INTEGER	:=	6;
		nbits_read						:	INTEGER	:=	12;
		clk_div							:	INTEGER	:=	100; --500kHz sampling frequency for a 50MHz clock input
		convst_wait_cycles			:	INTEGER	:=	100;
		convst_wait_after_cycles	:	INTEGER	:=	100_000;
		wait_between_read_cycles	:	INTEGER	:=	100_000
		);

  PORT(
	clk			:	IN			STD_LOGIC; --system clock
	sclk			:	BUFFER	STD_LOGIC; --serial clock
	reset_n		:	IN			STD_LOGIC; --asynchronous reset
	 
	convst		:	OUT		STD_LOGIC; --conversion start
	adc_sck		:	BUFFER	STD_LOGIC;	-- adc clock
	adc_sdi		:	OUT		STD_LOGIC;	-- FPGA to ADC
	adc_sdo		:	IN			STD_LOGIC;	--	ADC to FPGA
	
	outputs			:	BUFFER	STD_LOGIC_VECTOR(nbits_read-1 DOWNTO 0);
	ena				:	IN		STD_LOGIC;
	 
	HEX00	:	OUT STD_LOGIC;   
	HEX01	:	OUT STD_LOGIC;   
	HEX02	:	OUT STD_LOGIC;   
	HEX03	:	OUT STD_LOGIC;  
	HEX04	:	OUT STD_LOGIC;  
	HEX05	:	OUT STD_LOGIC;  
	HEX06	:	OUT STD_LOGIC;  
	HEX10	:	OUT STD_LOGIC;
	HEX11	:	OUT STD_LOGIC;   
	HEX12	:	OUT STD_LOGIC;   
	HEX13	:	OUT STD_LOGIC;  
	HEX14	:	OUT STD_LOGIC;  
	HEX15	:	OUT STD_LOGIC;  
	HEX16	:	OUT STD_LOGIC;
	HEX20	:	OUT STD_LOGIC;   
	HEX21	:	OUT STD_LOGIC;   
	HEX22	:	OUT STD_LOGIC;   
	HEX23	:	OUT STD_LOGIC;  
	HEX24	:	OUT STD_LOGIC;  
	HEX25	:	OUT STD_LOGIC;  
	HEX26	:	OUT STD_LOGIC;
	HEX30	:	OUT STD_LOGIC;   
	HEX31	:	OUT STD_LOGIC;   
	HEX32	:	OUT STD_LOGIC;   
	HEX33	:	OUT STD_LOGIC;  
	HEX34	:	OUT STD_LOGIC;  
	HEX35	:	OUT STD_LOGIC;  
	HEX36	:	OUT STD_LOGIC		 
	);
END entity;

ARCHITECTURE logic OF adc IS

	TYPE		machine	IS	(initial, wait_input,start_conversion, send, wait_while_busy, wait_between_sent);	--state machine data type which enumerates the different states
	SIGNAL	state					:	machine;                                      	--current state
	
	SIGNAL	tx_cmd		:	STD_LOGIC_VECTOR(nbits_cmd-1 DOWNTO 0);					--command to send
	SIGNAL	rx_data		:	STD_LOGIC_VECTOR(nbits_read-1 DOWNTO 0);					--data received

	SIGNAL	s_d			:	STD_LOGIC	:= '1';												-- single-ended/N_differential bit
	SIGNAL	o_s			:	STD_LOGIC	:= '1';												-- odd/ N_sign bit
	SIGNAL	address		:	STD_LOGIC_VECTOR(1 downto 0) := (0 => '0', 1 => '0');	-- address select bits
	SIGNAL	uni			:	STD_LOGIC	:= '1';												-- unipolar/N_bipolar bit
	SIGNAL	slp			:	STD_LOGIC	:= '0';												-- no_sleep/N_yes_sleep bit
	
	SIGNAL	send_sck		:	STD_LOGIC	:=	'0';												-- Send clock phase shifted 90° with the adc clock
	
	SIGNAL	temp_16 : STD_LOGIC_VECTOR( 15 DOWNTO 0 );									-- 16 bits value for the 7 segment display
	
	COMPONENT quad_segment7 IS 
	PORT ( 
			 number : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
          input : IN  STD_LOGIC;
			 cout	 : OUT STD_LOGIC;
          HEX00 : OUT STD_LOGIC;   
          HEX01 : OUT STD_LOGIC;   
          HEX02 : OUT STD_LOGIC;   
          HEX03 : OUT STD_LOGIC;  
          HEX04 : OUT STD_LOGIC;  
          HEX05 : OUT STD_LOGIC;  
          HEX06 : OUT STD_LOGIC;  
			 HEX10 : OUT STD_LOGIC;   
          HEX11 : OUT STD_LOGIC;   
          HEX12 : OUT STD_LOGIC;   
          HEX13 : OUT STD_LOGIC;  
          HEX14 : OUT STD_LOGIC;  
          HEX15 : OUT STD_LOGIC;  
          HEX16 : OUT STD_LOGIC;
			 HEX20 : OUT STD_LOGIC;   
          HEX21 : OUT STD_LOGIC;   
          HEX22 : OUT STD_LOGIC;   
          HEX23 : OUT STD_LOGIC;  
          HEX24 : OUT STD_LOGIC;  
          HEX25 : OUT STD_LOGIC;  
          HEX26 : OUT STD_LOGIC;
			 HEX30 : OUT STD_LOGIC;   
          HEX31 : OUT STD_LOGIC;   
          HEX32 : OUT STD_LOGIC;   
          HEX33 : OUT STD_LOGIC;  
          HEX34 : OUT STD_LOGIC;  
          HEX35 : OUT STD_LOGIC;  
          HEX36 : OUT STD_LOGIC 
         ); 
END COMPONENT;

COMPONENT pwm IS
	GENERIC(
		sys_clk         : INTEGER := 50_000_000; --system clock frequency in Hz
      pwm_freq        : INTEGER := 100_000;    --PWM switching frequency in Hz 100_000
      bits_resolution : INTEGER := nbits_read;          --bits of resolution setting the duty cycle
      phases          : INTEGER := 1);         --number of output pwms and phases
	PORT(
      clk       : IN  STD_LOGIC;                                    --system clock
      reset_n   : IN  STD_LOGIC;                                    --asynchronous reset
      ena       : IN  STD_LOGIC;                                    --latches in new duty cycle
      duty      : IN  STD_LOGIC_VECTOR(bits_resolution-1 DOWNTO 0); --duty cycle
      pwm_out   : OUT STD_LOGIC_VECTOR(phases-1 DOWNTO 0);          --pwm outputs
      pwm_n_out : OUT STD_LOGIC_VECTOR(phases-1 DOWNTO 0));         --pwm inverse outputs
END COMPONENT;

BEGIN
	temp_16 <= STD_LOGIC_VECTOR(RESIZE(unsigned(outputs), temp_16'LENGTH)); 
	quad_segment7_1 : quad_segment7 PORT MAP(temp_16,'0',open,HEX00,HEX01,HEX02,HEX03,HEX04,HEX05,HEX06,HEX10,HEX11,HEX12,HEX13,HEX14,HEX15,HEX16,HEX20,HEX21,HEX22,HEX23,HEX24,HEX25,HEX26,HEX30,HEX31,HEX32,HEX33,HEX34,HEX35,HEX36);

	tx_cmd <= (
					0 => s_d,
					1 => o_s,
					2 => address(0),
					3 => address(1),
					4 => uni,
					5 => slp
					);

MAIN : PROCESS (clk,reset_n)
	VARIABLE	convst_counter	:	integer	:=	0;
	VARIABLE	convst_wait_after_counter	:	integer	:=	0;
	VARIABLE	wait_counter	:	integer	:=	0;
	VARIABLE clock_count		:	integer	:= 0;
	VARIABLE bit_count		:	integer	:= 0;
BEGIN
	if reset_n = '0' then
		state <= initial;
	elsif (rising_edge(clk)) then
		CASE state IS
			WHEN initial =>
				
				send_sck <= '0';
				adc_sck <= '0';
				
				state <= wait_input;
				
			WHEN wait_input =>			-- Nothing happens unless le circuit is enabled
					
				IF ena = '0' THEN
					state <= wait_input;
				ELSE
					state <= start_conversion;				
				END IF;
				
			WHEN start_conversion =>	-- Wait a little for the conversion start pulse to be wide enough

				IF (convst_counter < convst_wait_cycles) THEN
					convst_counter := convst_counter + 1;
					convst <= '1';
					state <= start_conversion;
				ELSE
					convst_counter := 0;
					convst <= '0';				
					state <= send;
				END IF;
				
			WHEN send =>	-- Wait to get the sensor ready to send data
				
				IF (convst_wait_after_counter < convst_wait_after_cycles) THEN
					convst_wait_after_counter := convst_wait_after_counter + 1;
					state <= send;
				ELSE
					convst_wait_after_counter := 0;
					state <= wait_while_busy;					
				END IF;
								
			WHEN wait_while_busy =>
							
				IF((bit_count = nbits_read) AND (adc_sck = '0')) THEN
					bit_count := 0;
					send_sck <= '0';
					adc_sck <= '0';
					state <= wait_between_sent;
				ELSE
					state <= wait_while_busy;
					clock_count := clock_count + 1;
					
					IF(clock_count = clk_div/4) THEN					--The send clock and adc clock are phase shifted (90°)
						IF(bit_count < nbits_cmd+1) THEN				-- The send_clk is clocked one more time to get the send signal to LOW					
							send_sck <= not send_sck;
						ELSE
							send_sck <= '0';
						END IF;
					ELSIF (clock_count = clk_div/2) THEN
						adc_sck <= not adc_sck;
						clock_count := 0;						
						IF(adc_sck = '0') THEN
							bit_count := bit_count + 1;
						END IF;
					END IF;								
										
				END IF;				
							
			WHEN wait_between_sent =>			
				outputs	<=	rx_data; 									-- Latch the data received to the outputs				
				IF wait_counter < wait_between_read_cycles THEN	-- Wait before reading a new value
					wait_counter := wait_counter + 1;
					state <= wait_between_sent;
				ELSE
					wait_counter := 0;					
					state <= initial;
				END IF;
				
			WHEN OTHERS =>
				state <= initial;
		END CASE;	
		
	END IF;
END PROCESS MAIN;

DATA_SEND : PROCESS(send_sck)
	VARIABLE send_counter : integer := 0;
BEGIN
	IF(rising_edge(send_sck)) THEN
		IF(send_counter < nbits_cmd) THEN
			adc_sdi <= tx_cmd(send_counter);
			send_counter := send_counter + 1;
		ELSE
			adc_sdi <= '0';
			send_counter := 0;
		END IF;
	END IF;
END PROCESS;

DATA_READ : PROCESS(adc_sck)
	VARIABLE read_counter : integer := 0;
BEGIN
	IF(rising_edge(adc_sck)) THEN
		IF(read_counter = nbits_read-1) THEN
			read_counter := 0;			
		ELSE			
			rx_data((nbits_read-1) - read_counter) <= adc_sdo;
			read_counter := read_counter + 1;
		END IF;
	END IF;
END PROCESS;

END logic;

CONFIGURATION adc_quad_segment_cfg OF adc IS
	FOR logic
		FOR ALL : quad_segment7		
			USE CONFIGURATION WORK.digit_quad_cfg;
		END FOR;
	END FOR;
END adc_quad_segment_cfg;