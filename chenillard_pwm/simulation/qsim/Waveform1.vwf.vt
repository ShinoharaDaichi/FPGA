// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/13/2015 12:46:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    chenillard_pwm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module chenillard_pwm_vlg_sample_tst(
	clk,
	delay,
	enable_pwm,
	reset_pwm,
	sampler_tx
);
input  clk;
input [7:0] delay;
input  enable_pwm;
input  reset_pwm;
output sampler_tx;

reg sample;
time current_time;
always @(clk or delay or enable_pwm or reset_pwm)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module chenillard_pwm_vlg_check_tst (
	difference_t,
	i_t,
	leds_output,
	pwm_test,
	sampler_rx
);
input [9:0] difference_t;
input [9:0] i_t;
input [9:0] leds_output;
input  pwm_test;
input sampler_rx;

reg [9:0] difference_t_expected;
reg [9:0] i_t_expected;
reg [9:0] leds_output_expected;
reg  pwm_test_expected;

reg [9:0] difference_t_prev;
reg [9:0] i_t_prev;
reg [9:0] leds_output_prev;
reg  pwm_test_prev;

reg [9:0] difference_t_expected_prev;
reg [9:0] i_t_expected_prev;
reg [9:0] leds_output_expected_prev;
reg  pwm_test_expected_prev;

reg [9:0] last_difference_t_exp;
reg [9:0] last_i_t_exp;
reg [9:0] last_leds_output_exp;
reg  last_pwm_test_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	difference_t_prev = difference_t;
	i_t_prev = i_t;
	leds_output_prev = leds_output;
	pwm_test_prev = pwm_test;
end

// update expected /o prevs

always @(trigger)
begin
	difference_t_expected_prev = difference_t_expected;
	i_t_expected_prev = i_t_expected;
	leds_output_expected_prev = leds_output_expected;
	pwm_test_expected_prev = pwm_test_expected;
end


// expected leds_output[ 9 ]
initial
begin
	leds_output_expected[9] = 1'bX;
end 
// expected leds_output[ 8 ]
initial
begin
	leds_output_expected[8] = 1'bX;
end 
// expected leds_output[ 7 ]
initial
begin
	leds_output_expected[7] = 1'bX;
end 
// expected leds_output[ 6 ]
initial
begin
	leds_output_expected[6] = 1'bX;
end 
// expected leds_output[ 5 ]
initial
begin
	leds_output_expected[5] = 1'bX;
end 
// expected leds_output[ 4 ]
initial
begin
	leds_output_expected[4] = 1'bX;
end 
// expected leds_output[ 3 ]
initial
begin
	leds_output_expected[3] = 1'bX;
end 
// expected leds_output[ 2 ]
initial
begin
	leds_output_expected[2] = 1'bX;
end 
// expected leds_output[ 1 ]
initial
begin
	leds_output_expected[1] = 1'bX;
end 
// expected leds_output[ 0 ]
initial
begin
	leds_output_expected[0] = 1'bX;
end 
// expected difference_t[ 9 ]
initial
begin
	difference_t_expected[9] = 1'bX;
end 
// expected difference_t[ 8 ]
initial
begin
	difference_t_expected[8] = 1'bX;
end 
// expected difference_t[ 7 ]
initial
begin
	difference_t_expected[7] = 1'bX;
end 
// expected difference_t[ 6 ]
initial
begin
	difference_t_expected[6] = 1'bX;
end 
// expected difference_t[ 5 ]
initial
begin
	difference_t_expected[5] = 1'bX;
end 
// expected difference_t[ 4 ]
initial
begin
	difference_t_expected[4] = 1'bX;
end 
// expected difference_t[ 3 ]
initial
begin
	difference_t_expected[3] = 1'bX;
end 
// expected difference_t[ 2 ]
initial
begin
	difference_t_expected[2] = 1'bX;
end 
// expected difference_t[ 1 ]
initial
begin
	difference_t_expected[1] = 1'bX;
end 
// expected difference_t[ 0 ]
initial
begin
	difference_t_expected[0] = 1'bX;
end 
// expected i_t[ 9 ]
initial
begin
	i_t_expected[9] = 1'bX;
end 
// expected i_t[ 8 ]
initial
begin
	i_t_expected[8] = 1'bX;
end 
// expected i_t[ 7 ]
initial
begin
	i_t_expected[7] = 1'bX;
end 
// expected i_t[ 6 ]
initial
begin
	i_t_expected[6] = 1'bX;
end 
// expected i_t[ 5 ]
initial
begin
	i_t_expected[5] = 1'bX;
end 
// expected i_t[ 4 ]
initial
begin
	i_t_expected[4] = 1'bX;
end 
// expected i_t[ 3 ]
initial
begin
	i_t_expected[3] = 1'bX;
end 
// expected i_t[ 2 ]
initial
begin
	i_t_expected[2] = 1'bX;
end 
// expected i_t[ 1 ]
initial
begin
	i_t_expected[1] = 1'bX;
end 
// expected i_t[ 0 ]
initial
begin
	i_t_expected[0] = 1'bX;
end 

// expected pwm_test
initial
begin
	pwm_test_expected = 1'bX;
end 
// generate trigger
always @(difference_t_expected or difference_t or i_t_expected or i_t or leds_output_expected or leds_output or pwm_test_expected or pwm_test)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected difference_t = %b | expected i_t = %b | expected leds_output = %b | expected pwm_test = %b | ",difference_t_expected_prev,i_t_expected_prev,leds_output_expected_prev,pwm_test_expected_prev);
	$display("| real difference_t = %b | real i_t = %b | real leds_output = %b | real pwm_test = %b | ",difference_t_prev,i_t_prev,leds_output_prev,pwm_test_prev);
`endif
	if (
		( difference_t_expected_prev[0] !== 1'bx ) && ( difference_t_prev[0] !== difference_t_expected_prev[0] )
		&& ((difference_t_expected_prev[0] !== last_difference_t_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port difference_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", difference_t_expected_prev);
		$display ("     Real value = %b", difference_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_difference_t_exp[0] = difference_t_expected_prev[0];
	end
	if (
		( difference_t_expected_prev[1] !== 1'bx ) && ( difference_t_prev[1] !== difference_t_expected_prev[1] )
		&& ((difference_t_expected_prev[1] !== last_difference_t_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port difference_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", difference_t_expected_prev);
		$display ("     Real value = %b", difference_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_difference_t_exp[1] = difference_t_expected_prev[1];
	end
	if (
		( difference_t_expected_prev[2] !== 1'bx ) && ( difference_t_prev[2] !== difference_t_expected_prev[2] )
		&& ((difference_t_expected_prev[2] !== last_difference_t_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port difference_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", difference_t_expected_prev);
		$display ("     Real value = %b", difference_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_difference_t_exp[2] = difference_t_expected_prev[2];
	end
	if (
		( difference_t_expected_prev[3] !== 1'bx ) && ( difference_t_prev[3] !== difference_t_expected_prev[3] )
		&& ((difference_t_expected_prev[3] !== last_difference_t_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port difference_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", difference_t_expected_prev);
		$display ("     Real value = %b", difference_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_difference_t_exp[3] = difference_t_expected_prev[3];
	end
	if (
		( difference_t_expected_prev[4] !== 1'bx ) && ( difference_t_prev[4] !== difference_t_expected_prev[4] )
		&& ((difference_t_expected_prev[4] !== last_difference_t_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port difference_t[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", difference_t_expected_prev);
		$display ("     Real value = %b", difference_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_difference_t_exp[4] = difference_t_expected_prev[4];
	end
	if (
		( difference_t_expected_prev[5] !== 1'bx ) && ( difference_t_prev[5] !== difference_t_expected_prev[5] )
		&& ((difference_t_expected_prev[5] !== last_difference_t_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port difference_t[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", difference_t_expected_prev);
		$display ("     Real value = %b", difference_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_difference_t_exp[5] = difference_t_expected_prev[5];
	end
	if (
		( difference_t_expected_prev[6] !== 1'bx ) && ( difference_t_prev[6] !== difference_t_expected_prev[6] )
		&& ((difference_t_expected_prev[6] !== last_difference_t_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port difference_t[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", difference_t_expected_prev);
		$display ("     Real value = %b", difference_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_difference_t_exp[6] = difference_t_expected_prev[6];
	end
	if (
		( difference_t_expected_prev[7] !== 1'bx ) && ( difference_t_prev[7] !== difference_t_expected_prev[7] )
		&& ((difference_t_expected_prev[7] !== last_difference_t_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port difference_t[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", difference_t_expected_prev);
		$display ("     Real value = %b", difference_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_difference_t_exp[7] = difference_t_expected_prev[7];
	end
	if (
		( difference_t_expected_prev[8] !== 1'bx ) && ( difference_t_prev[8] !== difference_t_expected_prev[8] )
		&& ((difference_t_expected_prev[8] !== last_difference_t_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port difference_t[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", difference_t_expected_prev);
		$display ("     Real value = %b", difference_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_difference_t_exp[8] = difference_t_expected_prev[8];
	end
	if (
		( difference_t_expected_prev[9] !== 1'bx ) && ( difference_t_prev[9] !== difference_t_expected_prev[9] )
		&& ((difference_t_expected_prev[9] !== last_difference_t_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port difference_t[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", difference_t_expected_prev);
		$display ("     Real value = %b", difference_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_difference_t_exp[9] = difference_t_expected_prev[9];
	end
	if (
		( i_t_expected_prev[0] !== 1'bx ) && ( i_t_prev[0] !== i_t_expected_prev[0] )
		&& ((i_t_expected_prev[0] !== last_i_t_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i_t[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i_t_expected_prev);
		$display ("     Real value = %b", i_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_i_t_exp[0] = i_t_expected_prev[0];
	end
	if (
		( i_t_expected_prev[1] !== 1'bx ) && ( i_t_prev[1] !== i_t_expected_prev[1] )
		&& ((i_t_expected_prev[1] !== last_i_t_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i_t[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i_t_expected_prev);
		$display ("     Real value = %b", i_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_i_t_exp[1] = i_t_expected_prev[1];
	end
	if (
		( i_t_expected_prev[2] !== 1'bx ) && ( i_t_prev[2] !== i_t_expected_prev[2] )
		&& ((i_t_expected_prev[2] !== last_i_t_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i_t[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i_t_expected_prev);
		$display ("     Real value = %b", i_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_i_t_exp[2] = i_t_expected_prev[2];
	end
	if (
		( i_t_expected_prev[3] !== 1'bx ) && ( i_t_prev[3] !== i_t_expected_prev[3] )
		&& ((i_t_expected_prev[3] !== last_i_t_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i_t[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i_t_expected_prev);
		$display ("     Real value = %b", i_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_i_t_exp[3] = i_t_expected_prev[3];
	end
	if (
		( i_t_expected_prev[4] !== 1'bx ) && ( i_t_prev[4] !== i_t_expected_prev[4] )
		&& ((i_t_expected_prev[4] !== last_i_t_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i_t[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i_t_expected_prev);
		$display ("     Real value = %b", i_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_i_t_exp[4] = i_t_expected_prev[4];
	end
	if (
		( i_t_expected_prev[5] !== 1'bx ) && ( i_t_prev[5] !== i_t_expected_prev[5] )
		&& ((i_t_expected_prev[5] !== last_i_t_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i_t[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i_t_expected_prev);
		$display ("     Real value = %b", i_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_i_t_exp[5] = i_t_expected_prev[5];
	end
	if (
		( i_t_expected_prev[6] !== 1'bx ) && ( i_t_prev[6] !== i_t_expected_prev[6] )
		&& ((i_t_expected_prev[6] !== last_i_t_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i_t[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i_t_expected_prev);
		$display ("     Real value = %b", i_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_i_t_exp[6] = i_t_expected_prev[6];
	end
	if (
		( i_t_expected_prev[7] !== 1'bx ) && ( i_t_prev[7] !== i_t_expected_prev[7] )
		&& ((i_t_expected_prev[7] !== last_i_t_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i_t[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i_t_expected_prev);
		$display ("     Real value = %b", i_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_i_t_exp[7] = i_t_expected_prev[7];
	end
	if (
		( i_t_expected_prev[8] !== 1'bx ) && ( i_t_prev[8] !== i_t_expected_prev[8] )
		&& ((i_t_expected_prev[8] !== last_i_t_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i_t[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i_t_expected_prev);
		$display ("     Real value = %b", i_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_i_t_exp[8] = i_t_expected_prev[8];
	end
	if (
		( i_t_expected_prev[9] !== 1'bx ) && ( i_t_prev[9] !== i_t_expected_prev[9] )
		&& ((i_t_expected_prev[9] !== last_i_t_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port i_t[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", i_t_expected_prev);
		$display ("     Real value = %b", i_t_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_i_t_exp[9] = i_t_expected_prev[9];
	end
	if (
		( leds_output_expected_prev[0] !== 1'bx ) && ( leds_output_prev[0] !== leds_output_expected_prev[0] )
		&& ((leds_output_expected_prev[0] !== last_leds_output_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_output_expected_prev);
		$display ("     Real value = %b", leds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_leds_output_exp[0] = leds_output_expected_prev[0];
	end
	if (
		( leds_output_expected_prev[1] !== 1'bx ) && ( leds_output_prev[1] !== leds_output_expected_prev[1] )
		&& ((leds_output_expected_prev[1] !== last_leds_output_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_output_expected_prev);
		$display ("     Real value = %b", leds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_leds_output_exp[1] = leds_output_expected_prev[1];
	end
	if (
		( leds_output_expected_prev[2] !== 1'bx ) && ( leds_output_prev[2] !== leds_output_expected_prev[2] )
		&& ((leds_output_expected_prev[2] !== last_leds_output_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_output_expected_prev);
		$display ("     Real value = %b", leds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_leds_output_exp[2] = leds_output_expected_prev[2];
	end
	if (
		( leds_output_expected_prev[3] !== 1'bx ) && ( leds_output_prev[3] !== leds_output_expected_prev[3] )
		&& ((leds_output_expected_prev[3] !== last_leds_output_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_output_expected_prev);
		$display ("     Real value = %b", leds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_leds_output_exp[3] = leds_output_expected_prev[3];
	end
	if (
		( leds_output_expected_prev[4] !== 1'bx ) && ( leds_output_prev[4] !== leds_output_expected_prev[4] )
		&& ((leds_output_expected_prev[4] !== last_leds_output_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_output_expected_prev);
		$display ("     Real value = %b", leds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_leds_output_exp[4] = leds_output_expected_prev[4];
	end
	if (
		( leds_output_expected_prev[5] !== 1'bx ) && ( leds_output_prev[5] !== leds_output_expected_prev[5] )
		&& ((leds_output_expected_prev[5] !== last_leds_output_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_output_expected_prev);
		$display ("     Real value = %b", leds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_leds_output_exp[5] = leds_output_expected_prev[5];
	end
	if (
		( leds_output_expected_prev[6] !== 1'bx ) && ( leds_output_prev[6] !== leds_output_expected_prev[6] )
		&& ((leds_output_expected_prev[6] !== last_leds_output_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_output_expected_prev);
		$display ("     Real value = %b", leds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_leds_output_exp[6] = leds_output_expected_prev[6];
	end
	if (
		( leds_output_expected_prev[7] !== 1'bx ) && ( leds_output_prev[7] !== leds_output_expected_prev[7] )
		&& ((leds_output_expected_prev[7] !== last_leds_output_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_output_expected_prev);
		$display ("     Real value = %b", leds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_leds_output_exp[7] = leds_output_expected_prev[7];
	end
	if (
		( leds_output_expected_prev[8] !== 1'bx ) && ( leds_output_prev[8] !== leds_output_expected_prev[8] )
		&& ((leds_output_expected_prev[8] !== last_leds_output_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_output[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_output_expected_prev);
		$display ("     Real value = %b", leds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_leds_output_exp[8] = leds_output_expected_prev[8];
	end
	if (
		( leds_output_expected_prev[9] !== 1'bx ) && ( leds_output_prev[9] !== leds_output_expected_prev[9] )
		&& ((leds_output_expected_prev[9] !== last_leds_output_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_output[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_output_expected_prev);
		$display ("     Real value = %b", leds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_leds_output_exp[9] = leds_output_expected_prev[9];
	end
	if (
		( pwm_test_expected_prev !== 1'bx ) && ( pwm_test_prev !== pwm_test_expected_prev )
		&& ((pwm_test_expected_prev !== last_pwm_test_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_test :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_test_expected_prev);
		$display ("     Real value = %b", pwm_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pwm_test_exp = pwm_test_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module chenillard_pwm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] delay;
reg enable_pwm;
reg reset_pwm;
// wires                                               
wire [9:0] difference_t;
wire [9:0] i_t;
wire [9:0] leds_output;
wire pwm_test;

wire sampler;                             

// assign statements (if any)                          
chenillard_pwm i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.delay(delay),
	.difference_t(difference_t),
	.enable_pwm(enable_pwm),
	.i_t(i_t),
	.leds_output(leds_output),
	.pwm_test(pwm_test),
	.reset_pwm(reset_pwm)
);

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 
// delay[ 7 ]
initial
begin
	delay[7] = 1'b0;
end 
// delay[ 6 ]
initial
begin
	delay[6] = 1'b0;
end 
// delay[ 5 ]
initial
begin
	delay[5] = 1'b0;
end 
// delay[ 4 ]
initial
begin
	delay[4] = 1'b0;
end 
// delay[ 3 ]
initial
begin
	delay[3] = 1'b1;
end 
// delay[ 2 ]
initial
begin
	delay[2] = 1'b0;
end 
// delay[ 1 ]
initial
begin
	delay[1] = 1'b1;
end 
// delay[ 0 ]
initial
begin
	delay[0] = 1'b0;
end 

// reset_pwm
initial
begin
	reset_pwm = 1'b0;
	reset_pwm = #800000 1'b1;
	reset_pwm = #2400000 1'b0;
end 

// enable_pwm
initial
begin
	enable_pwm = 1'b0;
	enable_pwm = #800000 1'b1;
	enable_pwm = #1600000 1'b0;
	enable_pwm = #960000 1'b1;
	enable_pwm = #3120000 1'b0;
end 

chenillard_pwm_vlg_sample_tst tb_sample (
	.clk(clk),
	.delay(delay),
	.enable_pwm(enable_pwm),
	.reset_pwm(reset_pwm),
	.sampler_tx(sampler)
);

chenillard_pwm_vlg_check_tst tb_out(
	.difference_t(difference_t),
	.i_t(i_t),
	.leds_output(leds_output),
	.pwm_test(pwm_test),
	.sampler_rx(sampler)
);
endmodule

