// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/12/2015 15:51:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    single_pwm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module single_pwm_vlg_sample_tst(
	clk,
	duty,
	ena,
	reset_n,
	sampler_tx
);
input  clk;
input [7:0] duty;
input  ena;
input  reset_n;
output sampler_tx;

reg sample;
time current_time;
always @(clk or duty or ena or reset_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module single_pwm_vlg_check_tst (
	pwm_out,
	sampler_rx
);
input  pwm_out;
input sampler_rx;

reg  pwm_out_expected;

reg  pwm_out_prev;

reg  pwm_out_expected_prev;

reg  last_pwm_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	pwm_out_prev = pwm_out;
end

// update expected /o prevs

always @(trigger)
begin
	pwm_out_expected_prev = pwm_out_expected;
end



// expected pwm_out
initial
begin
	pwm_out_expected = 1'bX;
end 
// generate trigger
always @(pwm_out_expected or pwm_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected pwm_out = %b | ",pwm_out_expected_prev);
	$display("| real pwm_out = %b | ",pwm_out_prev);
`endif
	if (
		( pwm_out_expected_prev !== 1'bx ) && ( pwm_out_prev !== pwm_out_expected_prev )
		&& ((pwm_out_expected_prev !== last_pwm_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_out_expected_prev);
		$display ("     Real value = %b", pwm_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwm_out_exp = pwm_out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module single_pwm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] duty;
reg ena;
reg reset_n;
// wires                                               
wire pwm_out;

wire sampler;                             

// assign statements (if any)                          
single_pwm i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.duty(duty),
	.ena(ena),
	.pwm_out(pwm_out),
	.reset_n(reset_n)
);

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 
// duty[ 7 ]
initial
begin
	duty[7] = 1'b1;
end 
// duty[ 6 ]
initial
begin
	duty[6] = 1'b0;
end 
// duty[ 5 ]
initial
begin
	duty[5] = 1'b0;
end 
// duty[ 4 ]
initial
begin
	duty[4] = 1'b1;
end 
// duty[ 3 ]
initial
begin
	duty[3] = 1'b0;
end 
// duty[ 2 ]
initial
begin
	duty[2] = 1'b0;
end 
// duty[ 1 ]
initial
begin
	duty[1] = 1'b0;
end 
// duty[ 0 ]
initial
begin
	duty[0] = 1'b0;
end 

// ena
initial
begin
	ena = 1'b1;
	ena = #1040000 1'b0;
	ena = #160000 1'b1;
end 

// reset_n
initial
begin
	reset_n = 1'b1;
	reset_n = #800000 1'b0;
	reset_n = #160000 1'b1;
end 

single_pwm_vlg_sample_tst tb_sample (
	.clk(clk),
	.duty(duty),
	.ena(ena),
	.reset_n(reset_n),
	.sampler_tx(sampler)
);

single_pwm_vlg_check_tst tb_out(
	.pwm_out(pwm_out),
	.sampler_rx(sampler)
);
endmodule

